name: Test, Build, Push Docker Image, Trigger Deployment

on:
  push:
    branches: ['main']

jobs:
  test:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.46.0-jammy
      env:
        PUBLIC_LOG_LEVEL: info
        PUBLIC_APP_ENV: development
        NODE_ENV: development
        PUBLIC_CF_TURNSTILE_KEY: ${{ secrets.PUBLIC_CF_TURNSTILE_KEY }}
        SECRET_CF_TURNSTILE_SECRET: ${{ secrets.SECRET_CF_TURNSTILE_SECRET }}
        PUBLIC_POCKETBASE_URL: ${{ secrets.PUBLIC_POCKETBASE_URL }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright
        run: npx playwright install
      - name: Run your tests
        run: npx playwright test
        env:
          HOME: /root

  semantic-release:
    needs: test
    permissions:
      contents: write
      pull-requests: write
      issues: write
    name: 'Semantic Release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 24.1.2
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/npm
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_PAT }}

  build:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    needs: semantic-release
    steps:
      - uses: actions/checkout@v4
      - name: Extract version and name and set it to TAG env and NAME env var
        run: |
          echo "TAG=$(jq -r '.version' package.json)" >> $GITHUB_ENV && \
          echo "NAME=$(jq -r '.name' package.json)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Build Container
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.CONTAINER_REGISTRY_URL }}/codigo/${{ env.NAME }}:${{ env.TAG }}
            ${{ vars.CONTAINER_REGISTRY_URL }}/codigo/${{ env.NAME }}:latest
          build-args: |
            PUBLIC_CF_TURNSTILE_KEY=${{ secrets.PUBLIC_CF_TURNSTILE_KEY }}
            SECRET_CF_TURNSTILE_SECRET=${{ secrets.SECRET_CF_TURNSTILE_SECRET }}
            PUBLIC_POCKETBASE_URL=${{ secrets.PUBLIC_POCKETBASE_URL }}

  trigger-deployment:
    name: 'Trigger Deployment Workflow'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract version and name and set it to TAG env and NAME env var
        run: |
          echo "TAG=$(jq -r '.version' package.json)" >> $GITHUB_ENV && \
          echo "NAME=$(jq -r '.name' package.json)" >> $GITHUB_ENV
      - name: Trigger deployment workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN_MM_CODIGO }}
          repository: codigo/basic-infra-setup
          event-type: deploy-application
          client-payload: '{"version": "${{ env.TAG }}", "name": "${{ env.NAME }}"}'

  launch-update:
    name: Trigger Container Update
    needs: trigger-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Generate Payload
        uses: morzzz007/github-actions-jwt-generator@1.0.1
        id: jwtGenerator
        with:
          secret: ${{ secrets.JWT_SECRET }}
          payload: '{"appName":"${{ env.NAME }}"}'

      - name: Trigger Update
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ vars.CONTAINER_UPDATER_URL }}/update
          method: POST
          customHeaders: '{ "Authorization": "Bearer ${{ steps.jwtGenerator.outputs.token }}", "Content-Type": "application/json"}'
          data: '{"appName": "${{ env.NAME }}"}'
